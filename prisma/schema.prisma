// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) // Internal ID for your DB
  clerkId   String   @unique // Clerk's user ID
  email     String   @unique
  name      String?
  avatar    String?
  phone     String?
  x         String?
  instagram String?
  facebook  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  eventsCreated  Event[]
  participations EventParticipant[]
  tickets        Ticket[]
}

enum EventStatus {
  ACTIVE
  CANCELLED
  DELETED
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  slug        String      @unique
  category    String?
  status      EventStatus @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime
  location    String
  capacity    Int
  price       Float
  bannerUrl   String?
  createdById String
  createdBy   User        @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participations EventParticipant[]
  tickets        Ticket[]

  @@unique([id, createdById]) // compound unique key to ensure event IDs are unique per user
}

enum EventRole {
  attendee
  organizer
}

model EventParticipant {
  id      String    @id @default(cuid())
  eventId String
  userId  String
  role    EventRole

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId]) // each user can only have 1 role per event
}

enum TicketType {
  GENERAL
  VIP
  early_bird
}

enum TicketStatus {
  PENDING
  CONFIRMED
  USED
  CANCELLED
  EXPIRED
}

model Ticket {
  id          String       @id @default(cuid())
  eventId     String
  userId      String
  type        TicketType   @default(GENERAL)
  qrCode      String       @unique
  status      TicketStatus @default(PENDING)
  issuedAt    DateTime     @default(now())
  checkedInAt DateTime? // mark when used at entry

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
